<?php

namespace app\modules\shop\controllers;

use app\models\Products;
use app\models\ProductsFeaturesValuesMap;
use app\models\ProductsSearch;
use app\models\UploadForm;
use app\models\Users;
use yii\base\Exception;
use yii\web\Controller;
use Yii;
use yii\web\UploadedFile;

/**
 * Product controller for the `shop` module
 */
class ProductController extends Controller
{

    public function init()
    {
        parent::init();
        if (!Yii::$app->user->isGuest && Yii::$app->user->identity->role == Users::ROLE_ADMIN) {
            return true;
        }
    }

    public function beforeAction($action)
    {
        Yii::$app->request->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Renders the index view for the module
     * @return string
     */
    public function actionIndex()
    {
        $model = new Products();
        $searchModel = new ProductsSearch();
        $dataProvider = $searchModel->searchAdmin(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'model' => $model,
        ]);
    }

    public function actionCreate() {
        $model = new Products();
        $uploadModel = new UploadForm();
        $post = Yii::$app->request->post('Products');
        if (!empty($post)) {
            foreach ($post as $key => $value) {
                $model->{$key} = $value;
            }
            if ($model->save()) {
                $uploadModel->files = UploadedFile::getInstances($model, 'files');
                $uploadModel->upload($model->id);
                $this->redirect('/shop/product/view?id='.$model->id);
            }
        }
        return $this->render('create', [
            'model' => $model,
            'uploadModel' => $uploadModel
        ]);
    }

    public function actionUpdate($id)
    {
        $model = $this->loadModel($id);
        $uploadModel = new UploadForm();
        if ($this->request->isPost && $model->load($this->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
            'uploadModel' => $uploadModel,
        ]);
    }

    public function actionView() {
        $model = $this->loadModel();
        return $this->render('view', [
            'model' => $model,
        ]);
    }

    public function actionEdit() {
        $model = $this->loadModel();
        foreach (array_keys(Yii::$app->request->post('Products')) as $key) {
            $model->{$key} = Yii::$app->request->post('Products')[$key];
        }
        if ($model->save()) {
            return $this->redirect('/shop/product/view?id=' . Yii::$app->request->get()['id']);
        }
        return $this->redirect('/');
    }

    public function actionRemoveFeature() {
        $model = ProductsFeaturesValuesMap::findOne(Yii::$app->request->get()['feature_id']);
        $model->delete();
        return $this->redirect('/shop/product/view?id=' . Yii::$app->request->get()['id']);
    }

    public function actionDelete($id = null, $ids = null) {
        if ($id !== null) {
            Products::findOne($id)->delete();
        }
        if ($ids !== null) {
            $products = Products::find()->where(['id' => explode(',', $ids)])->all();
            foreach ($products as $product) {
                $product->delete();
            }
        }
        return $this->redirect('/shop/product');
    }

    public function actionArchive($id = null, $ids = null) {
        if ($id !== null) {
            $product = Products::findOne($id);
            if ($product) {
                $product->status = 0;
                $product->save();
            }
        }
        if ($ids !== null) {
            $products = Products::find()->where(['id' => explode(',', $ids)])->all();
            foreach ($products as $product) {
                $product->status = 0;
                $product->save();
            }
        }
        return $this->redirect('/shop/product');
    }

    public function actionUnarchive($id = null, $ids = null) {
        if ($id !== null) {
            $product = Products::findOne($id);
            if ($product) {
                $product->status = 1;
                $product->save();
            }
        }
        if ($ids !== null) {
            $products = Products::find()->where(['id' => explode(',', $ids)])->all();
            foreach ($products as $product) {
                $product->status = 1;
                $product->save();
            }
        }
        return $this->redirect('/shop/product');
    }

    public function actionAddFeature() {
        $model = new ProductsFeaturesValuesMap();
        foreach (array_keys(Yii::$app->request->post('ProductsFeaturesValuesMap')) as $key) {
            $model->{$key} = Yii::$app->request->post('ProductsFeaturesValuesMap')[$key];
        }
        if ($model->save()) {
            return $this->redirect('/shop/product/view?id=' . Yii::$app->request->get()['id']);
        }
    }

    private function loadModel() {
        if ($id = Yii::$app->request->get()['id']) {
            if ($model = Products::findOne($id)) {
                return $model;
            }
        }
        throw new Exception('Товар не найден!');
    }
}
